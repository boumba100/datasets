{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Assertion schema",
  "description": "proof of income schema",
  "type": "object",
  "definitions": {
    "JsonLdContext": {
      "description": "A link to a valid JSON-LD context, or array of JSON-LD contexts",
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              },
              {
                "type": "array"
              }
            ]
          }
        }
      ]
    },
    "JsonLdType": {
      "description": "A type or an array of types defined in a referenced JSON-LD context.",
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "DateTime": {
      "description": "Open Badges must express timestamps as strings compatible with ISO 8601 guidelines, including the time and a time zone indicator. It is recommended to publish all timestamps in UTC. Previous versions of Open Badges allowed Unix timestamps as integers. Open Badges v2.0 requires string ISO 8601 values with time zone indicators. For example, 2016-12-31T23:59:59+00:00 is a valid ISO 8601 timestamp. It contains the year, month, day, T separator, hour number 0-23, minute, optional seconds and decimal microsecond, and a time zone indicator (+/- an offset from UTC or the Z designator for UTC).",
      "type": "string"
    },
    "HashString": {
      "type": "string",
      "description": "Open Badges SHA-256 Hash",
      "pattern": "^sha256\\$[a-fA-F0-9]{64}$"
    },
    "IdentityObject": {
      "title": "Badge Identity Object",
      "description": "From https://w3id.org/openbadges#IdentityObject.",
      "type": "object",
      "properties": {
        "identity": {
          "description": "Defined by `identity` property of https://w3id.org/openbadges#IdentityObject",
          "oneOf": [
            {
              "$ref": "#/definitions/HashString"
            },
            {
              "type": "string",
              "format": "email"
            }
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "email"
          ],
          "description": "Defined by `type` property of https://w3id.org/openbadges#IdentityObject"
        },
        "hashed": {
          "type": "boolean",
          "description": "Defined by `hashed` property of https://w3id.org/openbadges#IdentityObject"
        },
        "salt": {
          "description": "Defined by `salt` property of https://w3id.org/openbadges#IdentityObject",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "required": [
        "identity",
        "type",
        "hashed"
      ]
    },
    "VerificationObject": {
      "description": "From https://w3id.org/openbadges#VerificationObject, with extensions for Blockcerts verification",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/JsonLdType",
          "description": "Defined by `type` property of https://w3id.org/openbadges#VerificationObject. Blockcerts extension: this should contain the entry `MerkleProofVerification2017`"
        },
        "publicKey": {
          "type": "string",
          "anyOf": [
            {
              "type": "string",
              "pattern": "^ecdsa-koblitz-pubkey:",
              "description": "Issuer public key or blockchain address with `<scheme>:` prefix. For Bitcoin transactions, this would be the issuer public address prefixed with `ecdsa-koblitz-pubkey:`. Example: `ecdsa-koblitz-pubkey:14RZvYazz9H2DC2skBfpPVxax54g4yabxe`"
            },
            {
              "type": "string"
            }
          ],
          "description": "Blockcerts extension: the expected blockchain address for the signer of the transaction containing the merkle proof. In Blockcerts `publicKey`s are typically represented with a `<scheme>:` prefix. For Bitcoin transactions, this would be the issuer public Bitcoin address prefixed with `ecdsa-koblitz-pubkey:`; e.g. `ecdsa-koblitz-pubkey:14RZvYazz9H2DC2skBfpPVxax54g4yabxe`"
        }
      },
      "required": [
        "type"
      ]
    },
    "AlignmentObject": {
      "description": "From https://w3id.org/openbadges#AlignmentObject",
      "type": "object",
      "properties": {
        "targetName": {
          "type": "string",
          "description": "Defined by `targetName` property of https://w3id.org/openbadges#AlignmentObject"
        },
        "targetUrl": {
          "type": "string",
          "format": "uri",
          "description": "Defined by `targetUrl` property of https://w3id.org/openbadges#AlignmentObject"
        },
        "targetDescription": {
          "type": "string",
          "description": "Defined by `targetDescription` property of https://w3id.org/openbadges#AlignmentObject"
        }
      },
      "required": [
        "targetName",
        "targetUrl"
      ]
    },
    "AlignmentArray": {
      "description": "List of objects describing which objectives or educational standards this badge aligns to, if any.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AlignmentObject"
      }
    },
    "TagsArray": {
      "description": "List of tags that describe the type of achievement.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "SignatureLine": {
      "$ref": "https://w3id.org/blockcerts/schema/2.0/signatureLineSchema.json"
    },
    "ProofOfIncome": {
      "$ref": "https://raw.githubusercontent.com/boumba100/test_data/master/schema/incomeSchema.json",
      "type":"object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "birthDay": {
          "type": "string"
        },
        "taxYear": {
          "type": "string"
        },
        "taxProvince": {
          "type": "string"
        },
        "assessmentDate": {
          "type": "string"
        },
        "sin": {
          "type": "string"
        },
        "martialStat": {
          "type": "string"
        },
        "fillingDate": {
          "type": "string"
        },
        "resProvince": {
          "type": "string"
        },
        "address": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "id",
        "birthDay",
        "taxYear",
        "taxProvince",
        "assessmentDate",
        "sin",
        "martialStat",
        "fillingDate",
        "resProvince",
        "address"
      ]
    },
    "RecipientProfile": {
      "$ref": "https://w3id.org/blockcerts/schema/2.0/recipientSchema.json"
    },
    "MerkleProof2017": {
      "$ref": "https://w3id.org/blockcerts/schema/2.0/merkleProof2017Schema.json"
    }
  },
  "properties": {
    "id": {
      "description": "Defined by `id` property in https://w3id.org/openbadges#Assertion. This may be an HTTP IRI, but only if the issuer plans to host the assertions on a long-term basis, or (at least) until their expiration. Otherwise it is recommended to use a `urn:uuid:<UUID>`-formatted IRI.",
      "type": "string",
      "anyOf": [
        {
          "type": "string",
          "pattern": "^urn:uuid:"
        },
        {
          "type": "string",
          "format": "uri"
        }
      ]
    },
    "type": {
      "$ref": "#/definitions/JsonLdType",
      "description": "Defined by `type` property of https://w3id.org/openbadges#Assertion"
    },
    "recipient": {
      "$ref": "#/definitions/IdentityObject",
      "description": "Defined by `recipient` property of https://w3id.org/openbadges#Assertion, with Blockcerts extensions for recipient proof of ownership."
    },
    "verification": {
      "$ref": "#/definitions/VerificationObject",
      "description": "Defined by `verification` property of https://w3id.org/openbadges#Assertion, with Blockcerts extensions for verification of badges on a blockchain."
    },
    "issuedOn": {
      "$ref": "#/definitions/DateTime",
      "description": "Defined by `issuedOn` property of https://w3id.org/openbadges#Assertion"
    },
    "evidence": {
      "type": "string",
      "format": "uri",
      "description": "Defined by `evidence` property of https://w3id.org/openbadges#Assertion"
    },
    "narrative": {
      "type": "string",
      "description": "Defined by `narrative` property of https://w3id.org/openbadges#Assertion"
    },
    "expires": {
      "$ref": "#/definitions/DateTime",
      "description": "Defined by `expires` property of https://w3id.org/openbadges#Assertion"
    },
    "recipientProfile": {
      "$ref": "#/definitions/RecipientProfile"
    },
    "proofOfIncome": {
      "$ref": "#/definitions/proofOfIncome"
    },
    "signature": {
      "$ref": "#/definitions/MerkleProof2017"
    }
  },
  "required": [
    "id",
    "type",
    "recipient",
    "proofOfIncome",
    "verification",
    "issuedOn"
  ],
  "additionalProperties": true
}
